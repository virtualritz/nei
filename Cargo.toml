[package]
name = "nsi"
version = "0.5.7"
authors = ["Moritz Moeller <virtualritz@gmail.com>"]
edition = "2018"
keywords = ["graphics", "rendering", "3d", "ray-tracing", "scene-description"]
categories = ["graphics", "multimedia::images", "rendering::graphics-api"]
license = "MIT OR Apache-2.0 OR Zlib"
description = "Nodal Scene Interface for (offline) 3D renderers – ɴsɪ."
readme = "README.md"
homepage = "https://www.3delight.com/"
documentation = "https://docs.rs/nsi/"
repository = "https://github.com/virtualritz/nsi/"

[features]
default = ["dlopen_derive", "dlopen"]
# Specify this to link agains lib3delight
link_lib3delight = ["nsi-sys/link_lib3delight", "ndspy-sys/link_lib3delight"]
# Whether to download a dynamic library version of 3Delight
# if the renderer can't be found locally. The renderer is
# needed as soon as the crate is linked against (e.g. for
# running the tests).
download_lib3delight = ["nsi-sys/download_lib3delight"]
# Jupyter notebooks integration.
jupyter = ["base64", "evcxr_runtime", "image", "ndspy-sys", "num_enum", "rayon"]
# Pixel streaming support.
output = ["ndspy-sys", "num_enum"]
# Scene construction helpers.
toolbelt = ["ultraviolet", "rand"]
# Nightly/unstable features.
nightly = []

[dev-dependencies]
cargo-husky = "1.5.0"
dl-openvdb-query = "0.1.1"
exr = "0.9.0"
png = "0.16.8"
#polyhedron-ops = { version = "0.2.0", features = [ "nsi" ] }
polyhedron-ops = { path = "../polyhedron-ops", features = [ "nsi" ] }
nsi-3delight = { path = "../nsi-3delight" }

[dependencies]
enum_dispatch = "0.3.4"
lazy_static = "1.4.0"
nsi-sys = "0.1.13"
# Optional deps.
base64 = { version = "0.13.0", optional = true }
dlopen = { version = "0.1.8", optional = true }
dlopen_derive = { version = "0.1.4", optional = true }
evcxr_runtime = { version = "1.0.0", optional = true }
image = { version = "0.23.12", optional = true }
ndspy-sys = { version = "0.1.7", optional = true }
num_enum = { version = "0.5.1", optional = true }
rand = { version = "0.7.3", features = [ "small_rng" ], optional = true }
rayon = { version = "1.5.0", optional = true }
ultraviolet = { version = "0.7.5", features = [ "f64" ], optional = true }

[[example]]
path = "examples/output/main.rs"
name = "output"
required-features = [ "output" ]

[[example]]
path = "examples/volume/main.rs"
name = "volume"
required-features = [ "toolbelt" ]

[package.metadata.docs.rs]
features = ["output", "toolbelt", "nightly"]
